--- client.js	2012-04-10 16:52:21.000000000 +0200
+++ new_client.js	2014-12-13 15:10:31.000000000 +0200
@@ -94,7 +94,72 @@
 
       return pass;
     },
-
+//zx patch 
+//this is a function call with parameters
+    CSVtoArray :function (text) {//http://www.quora.com/How-can-I-parse-a-CSV-string-with-Javascript
+        var re_valid =  /^\s*(?:'[^'\\]*(?:\\[\S\s][^'\\]*)*'|"[^"\\]*(?:\\[\S\s][^"\\]*)*"|[^,'"\s\\]*(?:\s+[^,'"\s\\]+)*)\s*(?:,\s*(?:'[^'\\]*(?:\\[\S\s][^'\\]*)*'|"[^"\\]*(?:\\[\S\s][^"\\]*)*"|[^,'"\s\\]*(?:\s+[^,'"\s\\]+)*)\s*)*$/;
+        var re_value =  /(?!\s*$)\s*(?:'([^'\\]*(?:\\[\S\s][^'\\]*)*)'|"([^"\\]*(?:\\[\S\s][^"\\]*)*)"|([^,'"\s\\]*(?:\s+[^,'"\s\\]+)*))\s*(?:,|$)/g;
+        if (!re_valid.test(text)) return null;
+        var a = [];                    
+        text.replace(re_value,
+            function(m0, m1, m2, m3) {
+                if      (m1 !== undefined) a.push("'"+m1.replace(/\\'/g, "'")+"'");//keep quotes 
+                else if (m2 !== undefined) a.push('"'+m2.replace(/\\"/g, '"')+'"');
+                else if (m3 !== undefined) a.push(m3);
+                return ''; 
+            });
+        if (/,\s*$/.test(text)) a.push('');
+        return a;
+        },
+
+
+    fc: function(key, ctx, partials, returnFound) {
+          if (key.charAt(key.length-1)==")") 
+            key=key.slice(0,-1);  
+          var temp = key.split('(');
+          //console.log('zxhogan m1:',key,temp,key.charAt(key.length-1)); 
+          var fnname = temp[0];
+          //var parms=temp[1].split(',');
+          //var parms=temp[1].split(/,(?=([^']*\"[^']*')*[^']*$)/); //http://stackoverflow.com/questions/1757065/java-splitting-a-comma-separated-string-but-ignoring-commas-in-quotes
+          //var parms=temp[1].split(/^(('(?:[^']|'')*'|[^,]*)(,('(?:[^']|'')*'|[^,]*))*)$/); //http://www.kimgentes.com/worshiptech-web-tools-page/2008/10/14/regex-pattern-for-parsing-csv-files-with-embedded-commas-dou.html
+          var parms=this.CSVtoArray(temp[1]);
+          //parms.push("'test5'");
+          var val = this.f(fnname, ctx, partials, true);//returnFound==true
+          var cx=[];
+         //console.log('zxhogan m2:',parms); 
+          if (returnFound && !val) {
+            return false;
+          }    
+          
+          //resolve each parameter that is not a string          
+          for (var index = 0; index < parms.length; ++index) {
+                var parm=parms[index];   
+                if(parm.charAt(0)=="'" )
+                    {
+                    parm=parm.substr(1);
+                    if(parm.charAt(parm.length-1)=="'") 
+                        parm=parm.slice(0,-1);                    
+                    }
+                else
+                    {
+                    //console.log('zxhogan t1:'+parm); 
+                    parm = this.f(parm, ctx, partials, returnFound);
+                    }
+                cx.push(parm);    
+            }
+          
+          if (typeof val != 'function') 
+              console.log('zxhogan unknown function:'+fnname);           
+          
+          if (!returnFound && typeof val == 'function') {
+            ctx.push(cx);
+            val = this.lv(val, ctx, partials);
+            ctx.pop();            
+            }          
+            
+        return val;
+    },     
+    
     // find values with dotted names
     d: function(key, ctx, partials, returnFound) {
       var names = key.split('.'),
@@ -194,9 +259,11 @@
     // lambda replace variable
     lv: function(val, ctx, partials) {
       var cx = ctx[ctx.length - 1];
-      var result = val.call(cx);
+//zx patch adds ctx,this         
+      var result = val.call(cx,ctx,this);
       if (typeof result == 'function') {
-        result = result.call(cx);
+//zx patch adds ctx,this          
+        result = result.call(cx,ctx,this);
       }
       result = result.toString();
 
